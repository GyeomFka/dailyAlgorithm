객체지향의 한발짝 다가가기 ; 중복의 제거 → 재활용성 → 가독성, 유지보수 편의성
Method의 활용 : Refactoring
Method가 많아진다 → 객체지향의 활용 (Grouping)

Test t1 = new Test();
Test t2 = new Test();

t1이라는 변수는 Test를 담는 컨테이너이다.
Test라는 녀석은 데이터의 타입이다(사용자 정의 데이터 타입)

class Test{
  static int a = 10;    <클래스 변수>  : Static Field(클래스를 통해서'도' 접근이 가능하다.)
  int b, c;             <인스턴스 변수> : Non-Static Field(인스턴스를 통해 접근이 가능하다.)
}

 * 클래스변수는 클래스들에 의해 만들어지는 인스턴스들을 통해 (인스턴스를 생성하지 않고) 사용 가능하다.
 ex) int wantNum = Test.a;
 
 * 인스턴스 변수는 인스턴스 마다 다른값을 가질 수 있다.
 
 활용 (인스턴스를 생성하지 않고, 메모리를 아끼며 해당 변수를 활용할 수 있다.)
  1) 인스턴스에 따라서 변하지 않는 값이 필요한 경우.
  2) 인스턴스를 생성할 필요가 없는 값을 클래스에 저장하고 싶은경우
  3) 값의 변경 사항을 모든 인스턴스가 *공유* 해야 하는 경우
  
 * 인스턴스 메소드는 클래스 멤버에 접근 할 수 있다.
 * 클래스 메소드는 인스턴스 멤버에 접근 할 수 없다.
 why ? 클래스가 먼저 메모리에 저장 → 클래스 내부 인스턴스 변수가 생성 = 생성되지 않은 메소드에 접근하려는 것과 같은격!!

'21.07.08 끝